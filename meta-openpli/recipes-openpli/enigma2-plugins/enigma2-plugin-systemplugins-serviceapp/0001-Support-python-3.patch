From b5b73c77d74916cc6679ccaddeb494c0589c0694 Mon Sep 17 00:00:00 2001
From: persianpros <persianpros@gmail.com>
Date: Fri, 23 Oct 2020 15:54:17 +0330
Subject: [PATCH] Support python 3, thanks to Hains

---
 src/serviceapp/common.cpp     | 13 +++++++++++++
 src/serviceapp/serviceapp.cpp | 36 +++++++++++++++++++++++++++++++++++
 2 files changed, 49 insertions(+)

diff --git a/src/serviceapp/common.cpp b/src/serviceapp/common.cpp
index 34c71eb..928344c 100644
--- a/src/serviceapp/common.cpp
+++ b/src/serviceapp/common.cpp
@@ -8,6 +8,7 @@
 #include <sys/stat.h>
 
 #include "common.h"
+#include <Python.h>
 
 SettingEntry::SettingEntry():m_is_set(false){}
 SettingEntry::SettingEntry(const std::string &app_arg, int value, const std::string value_type):
@@ -221,13 +222,21 @@ int detectEncoding(const std::string &content, std::string &encoding)
 int convertToUTF8(const std::string &input_string, const std::string &input_encoding, std::string &output_string)
 {
     PyObject *py_string, *py_unicode;
+#if PY_MAJOR_VERSION >= 3
+    py_string = PyUnicode_FromStringAndSize(input_string.c_str(), input_string.length());
+#else
     py_string = PyString_FromStringAndSize(input_string.c_str(), input_string.length());
+#endif
     if (py_string == NULL)
     {
         PyErr_Print();
         return 1;
     }
+#if PY_MAJOR_VERSION >= 3
+    py_unicode = PyUnicode_AsDecodedObject(py_string, input_encoding.c_str(), "strict");
+#else
     py_unicode = PyString_AsDecodedObject(py_string, input_encoding.c_str(), "strict");
+#endif
     if (py_unicode == NULL)
     {
         Py_DECREF(py_string);
@@ -243,7 +252,11 @@ int convertToUTF8(const std::string &input_string, const std::string &input_enco
         return 1;
     }
     Py_DECREF(py_unicode);
+#if PY_MAJOR_VERSION >= 3
+    output_string = PyUnicode_AsUTF8(py_string);
+#else
     output_string = PyString_AsString(py_string);
+#endif
     Py_DECREF(py_string);
     return 0;
 }
diff --git a/src/serviceapp/serviceapp.cpp b/src/serviceapp/serviceapp.cpp
index 684ac14..95f9002 100644
--- a/src/serviceapp/serviceapp.cpp
+++ b/src/serviceapp/serviceapp.cpp
@@ -20,6 +20,8 @@
 #include "gstplayer.h"
 #include "exteplayer3.h"
 
+#include <Python.h>
+
 enum
 {
 	SUBSERVICES_INDEX_START = 1,
@@ -1681,6 +1683,39 @@ static PyMethodDef serviceappMethods[] = {
 	 {NULL,NULL,0,NULL}
 };
 
+#if PY_MAJOR_VERSION >= 3
+static struct PyModuleDef moduledef = {
+	PyModuleDef_HEAD_INIT,
+	"serviceapp",         /* m_name */
+	"serviceapp",        /* m_doc */
+	-1,                  /* m_size */
+	serviceappMethods,   /* m_methods */
+	NULL,                /* m_reload */
+	NULL,                /* m_traverse */
+	NULL,                /* m_clear */
+	NULL,                /* m_free */
+};
+
+PyMODINIT_FUNC PyInit_serviceapp(void)
+{
+	PyModule_Create(&moduledef);
+	g_GstPlayerOptionsServiceMP3 = new GstPlayerOptions();
+	g_GstPlayerOptionsServiceGst = new GstPlayerOptions();
+	g_GstPlayerOptionsUser = new GstPlayerOptions();
+
+	g_ExtEplayer3OptionsServiceMP3 = new ExtEplayer3Options();
+	g_ExtEplayer3OptionsServiceExt3 = new ExtEplayer3Options();
+	g_ExtEplayer3OptionsUser = new ExtEplayer3Options();
+
+	g_ServiceAppOptionsServiceMP3 = new eServiceAppOptions();
+	g_ServiceAppOptionsServiceExt3 = new eServiceAppOptions();
+	g_ServiceAppOptionsServiceGst = new eServiceAppOptions();
+	g_ServiceAppOptionsUser = new eServiceAppOptions();
+
+	SSL_load_error_strings();
+	SSL_library_init();
+}
+#else
 PyMODINIT_FUNC
 initserviceapp(void)
 {
@@ -1701,3 +1736,4 @@ initserviceapp(void)
 	SSL_load_error_strings();
 	SSL_library_init();
 }
+#endif
-- 
2.32.0

